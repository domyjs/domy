"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2240],{8728:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var i=t(1085),l=t(1184),o=t(1983);const s={sidebar_position:1},c="Get Started",d={id:"get-started",title:"Get Started",description:"Simply create a html file and fill it with this content:",source:"@site/docs/get-started.mdx",sourceDirName:".",slug:"/get-started",permalink:"/domy/docs/get-started",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Essentials",permalink:"/domy/docs/category/essentials"}},r={},a=[{value:"Explanation",id:"explanation",level:2},{value:"1. The Template Syntax",id:"1-the-template-syntax",level:3},{value:"2. The App Logic",id:"2-the-app-logic",level:3},{value:"3. Preventing Negative Values",id:"3-preventing-negative-values",level:3},{value:"4. Mounting the App",id:"4-mounting-the-app",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Scope data on current element",id:"scope-data-on-current-element",level:3},{value:"Conditional Rendering",id:"conditional-rendering",level:3},{value:"Loops with <code>d-for</code>",id:"loops-with-d-for",level:3},{value:"Dynamic Attributes and Events",id:"dynamic-attributes-and-events",level:3},{value:"Forms with <code>d-model</code>",id:"forms-with-d-model",level:3},{value:"Components",id:"components",level:3},{value:"Going Further",id:"going-further",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"get-started",children:"Get Started"}),"\n",(0,i.jsx)(n.p,{children:"Simply create a html file and fill it with this content:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<html>\n  <head>\n    <title>Domy is awesome !</title>\n    <script src="https://unpkg.com/@domyjs/core@1.x.x"><\/script>\n  </head>\n  <body>\n    <p>Count: {{ count }}</p>\n    <button @click="count++">Increment</button>\n    <button @click="count--">Decrement</button>\n  </body>\n  <script>\n    const { signal, watch } = DOMY;\n    DOMY.createApp(() => {\n      const count = signal(0);\n\n      watch(\n        ({ prevValue, newValue }) => {\n          if (newValue < 0) count.value = prevValue;\n        },\n        () => count\n      );\n\n      return {\n        count\n      };\n    }).mount();\n  <\/script>\n</html>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Open your file in the browser and see the following result !"}),"\n",(0,i.jsx)(o.A,{code:'\n  <p>Count: {{ count }}</p>\n  <button @click="count++">Increment</button>\n  <button @click="count--">Decrement</button>\n',domy:()=>{const{signal:e,watch:n}=DOMY,t=e(0);return n((({prevValue:e,newValue:n})=>{n<0&&(t.value=e)}),(()=>t)),{count:t}}}),"\n",(0,i.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsx)(n.p,{children:"Let's break down what's happening in the example above:"}),"\n",(0,i.jsx)(n.h3,{id:"1-the-template-syntax",children:"1. The Template Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<p>Count: {{ count }}</p>\n<button @click="count++">Increment</button>\n<button @click="count--">Decrement</button>\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"{{ count }}"}),": This is a placeholder that DOMY automatically replaces with the current value of ",(0,i.jsx)(n.code,{children:"count"}),". It updates automatically whenever ",(0,i.jsx)(n.code,{children:"count"})," changes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'@click="..."'}),": This is a DOMY directive that binds a click event to the button. When the button is clicked, the expression is evaluated."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"2-the-app-logic",children:"2. The App Logic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { signal, watch } = DOMY;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"signal(...)"}),": Creates a reactive value. Here, ",(0,i.jsx)(n.code,{children:"count"})," is initialized to ",(0,i.jsx)(n.code,{children:"0"}),". Changing ",(0,i.jsx)(n.code,{children:"count.value"})," automatically updates all parts of the DOM that reference it."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"watch(...)"}),": Observes changes to one or more signals and lets you react when a value changes."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-preventing-negative-values",children:"3. Preventing Negative Values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"watch(\n  ({ prevValue, newValue }) => {\n    if (newValue < 0) count.value = prevValue;\n  },\n  () => count\n);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This watcher monitors ",(0,i.jsx)(n.code,{children:"count"}),". If the new value is less than ",(0,i.jsx)(n.code,{children:"0"}),", it reverts to the previous value. This effectively prevents the counter from going negative."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-mounting-the-app",children:"4. Mounting the App"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"DOMY.createApp(() => {\n  ...\n}).mount();\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["This defines and mounts your app. Everything returned from the ",(0,i.jsx)(n.code,{children:"createApp"})," function becomes available in the template (HTML) via reactivity."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(n.h3,{id:"scope-data-on-current-element",children:"Scope data on current element"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"d-scope"})," to define data that's only accessible within a specific element:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<div d-scope=\"{ msg: 'Hello World!' }\">\n  <p>{{ msg }}</p>\n</div>\n<p>{{ msg }}</p>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"DOMY.createApp(() => ({ msg: 'Bye World!' })).mount();\n"})}),"\n",(0,i.jsx)(o.A,{code:"\n<div d-scope=\"{ msg: 'Hello World!' }\">\n  <p>{{ msg }}</p>\n</div>\n<p>{{ msg }}</p>\n",domy:()=>({msg:"Bye World!"})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-rendering",children:"Conditional Rendering"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"d-if"}),", ",(0,i.jsx)(n.code,{children:"d-else-if"}),", and ",(0,i.jsx)(n.code,{children:"d-else"})," for conditionals:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div d-scope="{ loggedIn: false }">\n  <button @click="loggedIn = !loggedIn">Toggle Login</button>\n\n  <p d-if="loggedIn">Welcome back!</p>\n  <p d-else>You are logged out.</p>\n</div>\n'})}),"\n",(0,i.jsx)(n.p,{children:"Only one conditional block will show depending on the expression."}),"\n",(0,i.jsx)(o.A,{code:'\n<div d-scope="{ loggedIn: false }">\n  <button @click="loggedIn = !loggedIn">Toggle Login</button>\n\n  <p d-if="loggedIn">Welcome back!</p>\n  <p d-else>You are logged out.</p>\n\n</div>\n'}),"\n",(0,i.jsxs)(n.h3,{id:"loops-with-d-for",children:["Loops with ",(0,i.jsx)(n.code,{children:"d-for"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"d-for"})," to loop through arrays. Use ",(0,i.jsx)(n.code,{children:"d-key"})," to help DOMY efficiently update the DOM:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<div d-scope=\"{ items: ['Apple', 'Banana', 'Cherry'] }\">\n  <ul>\n    <li d-for=\"item of items\" d-key=\"item\">{{ item }}</li>\n  </ul>\n</div>\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also access the index:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<li d-for="item, index of items" d-key="item">{{ index }} - {{ item }}</li>\n'})}),"\n",(0,i.jsx)(o.A,{code:"\n<div d-scope=\"{ items: ['Apple', 'Banana', 'Cherry'] }\">\n  <ul>\n    <li d-for=\"item, index of items\" d-key=\"item\">{{ index }} - {{ item }}</li>\n  </ul>\n</div>\n"}),"\n",(0,i.jsx)(n.h3,{id:"dynamic-attributes-and-events",children:"Dynamic Attributes and Events"}),"\n",(0,i.jsxs)(n.p,{children:["Bind attributes dynamically using the ",(0,i.jsx)(n.code,{children:":"})," shorthand for ",(0,i.jsx)(n.code,{children:"d-bind:"})," prefix. Create event with ",(0,i.jsx)(n.code,{children:"@"})," shorthand for ",(0,i.jsx)(n.code,{children:"d-on:"})," prefix:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div d-scope="{ active: true }">\n  <button @click="active = !active" :style="{ color: active ? \'green\' : \'red\' }">Toggle Me</button>\n  \x3c!-- \n   Same as: \n   <button d-on:click="active = !active" d-bind:style="{ color: active ? \'green\' : \'red\' }">Toggle Me</button>\n  --\x3e\n</div>\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can dynamically control any HTML attribute (styles, classes, ARIA attributes, etc.)."}),"\n",(0,i.jsx)(o.A,{code:'\n<div d-scope="{ active: true }">\n  <button @click="active = !active" :style="{ color: active ? \'green\' : \'red\' }">Toggle Me</button>\n</div>\n'}),"\n",(0,i.jsxs)(n.h3,{id:"forms-with-d-model",children:["Forms with ",(0,i.jsx)(n.code,{children:"d-model"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"d-model"})," to bind inputs easily:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div d-scope="{ filter: \'ba\', items: [\'bar\', \'foo\', \'baz\'] }">\n  <p>Current filter: {{ filter }}</p>\n  <input type="text" d-model="filter" />\n  <ul>\n    <li d-for="item of items" d-key="item" d-show="item.startsWith(filter)">{{ item }}</li>\n  </ul>\n</div>\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"d-show"})," hides or shows the element without removing it from the DOM (unlike ",(0,i.jsx)(n.code,{children:"d-if"}),")."]}),"\n",(0,i.jsx)(o.A,{code:'\n<div d-scope="{ filter: \'ba\', items: [\'bar\', \'foo\', \'baz\'] }">\n  <p>Current filter: {{ filter }}</p>\n  <input type="text" d-model="filter" />\n  <ul>\n    <li d-for="item of items" d-key="item" d-show="item.startsWith(filter)">{{ item }}</li>\n  </ul>\n</div>\n'}),"\n",(0,i.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,i.jsxs)(n.p,{children:["Create reusable components with ",(0,i.jsx)(n.code,{children:"DOMY.createComponent"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<counter d-for="i of [1,2,3]" d-key="i" :id="i"></counter>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const { signal } = DOMY;\n\nconst counter = DOMY.createComponent({\n  props: ['!id'],\n  html: `\n    <div>\n      <p>My component number: {{ $props.id }}</p>\n      <p>Count: {{ count }}</p>\n      <button @click=\"count++\">Increment</button>\n    </div\n    >`,\n  app: () => {\n    const count = signal(0);\n    return {\n      count\n    };\n  }\n});\n\nDOMY.createApp().components({ counter }).mount();\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"!id"})," mean the ",(0,i.jsx)(n.code,{children:"id"})," prop is ",(0,i.jsx)("b",{children:"required"})]}),"\n",(0,i.jsxs)(n.li,{children:["Access props using the ",(0,i.jsx)(n.code,{children:"useProps"})," hook or the ",(0,i.jsx)(n.code,{children:"$props"})," helper."]}),"\n"]}),"\n",(0,i.jsx)(o.A,{code:'\n  <counter d-for="i of [1,2,3]" d-key="i" :id="i"></counter>\n',components:()=>{const{signal:e}=DOMY;return{counter:DOMY.createComponent({props:["!id"],html:'\n  <div>\n    <p>My component number: {{ $props.id }}</p>\n    <p>Count: {{ count }}</p>\n    <button @click="count++">Increment</button>\n  </div\n  >',app:()=>({count:e(0)})})}}}),"\n",(0,i.jsx)(n.h2,{id:"going-further",children:"Going Further"}),"\n",(0,i.jsx)(n.p,{children:"These were just a few examples to get you started. To level up with DOMY, check out how to use plugins, explore the different directives, helpers, and hooks."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ Happy Codding!\n"})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);