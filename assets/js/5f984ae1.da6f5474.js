(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[930],{1184:(e,n,t)=>{"use strict";t.d(n,{R:()=>a,x:()=>l});var s=t(4041);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},1845:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var s=t(1085),r=t(1184),i=t(1983),a=t(6773),l=t.n(a);const c={},o="Mask",d={id:"plugins/mask",title:"Mask",description:"The d-mask directive allows you to apply input masks, ensuring consistent formatting for fields like phone numbers, credit cards, and currency inputs.",source:"@site/docs/plugins/mask.mdx",sourceDirName:"plugins",slug:"/plugins/mask",permalink:"/docs/plugins/mask",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intersect",permalink:"/docs/plugins/intersect"},next:{title:"Router",permalink:"/docs/plugins/router"}},u={},p=[{value:"Installation",id:"installation",level:2},{value:"Syntax and Usage",id:"syntax-and-usage",level:2},{value:"<strong>Basic Mask Usage (Static)</strong>",id:"basic-mask-usage-static",level:3},{value:"<strong>Dynamic Mask Usage</strong>",id:"dynamic-mask-usage",level:3},{value:"<strong>Money Formatting Helper (<code>$money</code>)</strong>",id:"money-formatting-helper-money",level:3},{value:"Example: Full Mask Implementation",id:"example-full-mask-implementation",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"mask",children:"Mask"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"d-mask"})," directive allows you to ",(0,s.jsx)(n.strong,{children:"apply input masks"}),", ensuring consistent formatting for fields like phone numbers, credit cards, and currency inputs."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["To use ",(0,s.jsx)(n.code,{children:"d-mask"}),", include the DOMY Mask plugin via CDN:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<script src="https://unpkg.com/@domyjs/mask@1.x.x"><\/script>\n'})}),"\n",(0,s.jsx)(n.p,{children:"And then:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"DOMY.createApp().plugins([mask]).mount();\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"syntax-and-usage",children:"Syntax and Usage"}),"\n",(0,s.jsx)(n.h3,{id:"basic-mask-usage-static",children:(0,s.jsx)(n.strong,{children:"Basic Mask Usage (Static)"})}),"\n",(0,s.jsx)(n.p,{children:"Use a predefined mask structure."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<input type="text" d-mask="99/99/9999" placeholder="DD/MM/YYYY" />\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,s.jsx)(n.strong,{children:"Mask Rules:"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"9"})," \u2192 Number (0-9)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"a"})," \u2192 Letter (A-Z or a-z)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"*"})," \u2192 Any character"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"dynamic-mask-usage",children:(0,s.jsx)(n.strong,{children:"Dynamic Mask Usage"})}),"\n",(0,s.jsxs)(n.p,{children:["Define a ",(0,s.jsx)(n.strong,{children:"mask dynamically"})," based on user input."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<input type="text" d-mask.dynamic="maskType" placeholder="Dynamic mask applied" />\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const maskType = input => {\n  return input.includes('@') ? 'a*@a*' : '999-999-9999';\n};\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"money-formatting-helper-money",children:(0,s.jsxs)(n.strong,{children:["Money Formatting Helper (",(0,s.jsx)(n.code,{children:"$money"}),")"]})}),"\n",(0,s.jsx)(n.p,{children:"Format currency inputs dynamically."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<input type="text" d-mask.dynamic="$money" placeholder="$0.00" />\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\ud83d\udca1 ",(0,s.jsx)(n.strong,{children:"Usage Options"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"$money(input, decimalSeparator = '.', thousandsSeparator = ',', precision = 2)"})}),"\n",(0,s.jsx)(n.li,{children:"Ensures consistent money formatting with thousands and decimals."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"example-full-mask-implementation",children:"Example: Full Mask Implementation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div>\n  <p>Phone</p>\n  <input type="text" d-mask="999-999-9999" />\n\n  <p>Price</p>\n  <input type="text" d-mask.dynamic="$money" placeholder="$0.00" />\n</div>\n'})}),"\n",(0,s.jsx)(i.A,{code:'\n<div>\n<p>Phone</p>\n<input type="text" d-mask="999-999-9999" />\n\n<p>Price</p>\n<input type="text" d-mask.dynamic="$money" placeholder="$0.00" />\n</div>\n',plugins:()=>[l()]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},1983:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var s=t(4041);const r="demo_TaPm";var i=t(1085);const a=({code:e,domy:n,components:a,config:l,plugins:c})=>{const o=(0,s.useRef)(null),[d,u]=(0,s.useState)(!1);return(0,s.useEffect)((()=>{let s=!0;u(!0);return(async()=>{try{if(!o.current||"undefined"==typeof window)return;const{default:s}=await t.e(5228).then(t.t.bind(t,2847,23));window.DOMY||(window.DOMY=s),console.log("DOMY"),o.current.innerHTML=e;const r=c?await c():[];s.createApp(n).configure(l??{}).plugins(r).components(a?.()).mount(o.current)}catch(s){console.error("[Demo] Load error:",s)}})(),()=>{s=!1}}),[d]),d?(0,i.jsx)("div",{className:r,ref:o}):(0,i.jsx)("div",{className:r,children:"Loading..."})}},6773:function(e){e.exports=function(){"use strict";const e={9:/\d/,a:/[a-zA-Z]/,"*":/./};function n(n,t){let s="",r=0;for(let i=0;i<t.length;i++){const a=t[i],l=n[r];if(!l)break;e[a]?e[a].test(l)?(s+=l,r++):(r++,i--):(s+=a,l===a&&r++)}return s}function t(){return function(e,n=".",t,s=2){if("-"===e)return"-";if(/^\D+$/.test(e))return"9";null==t&&(t=","===n?".":",");const r=e.startsWith("-")?"-":"",i=e.replace(new RegExp(`[^0-9\\${n}]`,"g"),""),[a]=i.split(n);let l=r+((e,n)=>{let t="",s=0;for(let r=e.length-1;r>=0;r--)e[r]!==n&&(3===s?(t=e[r]+n+t,s=0):t=e[r]+t,s++);return t})("9".repeat(a.length),t);return s>0&&e.includes(n)&&(l+=n+"9".repeat(s)),l}}function s(e,n,t,s){const r=s+(t.length-n.length);e.setSelectionRange(r,r)}function r(e){return e.modifiers.includes("dynamic")?function(e){const t=e.evaluate(e.attr.value),r=e.block.el,i=e=>"function"==typeof t?t(e):t,a=()=>{var e;const t=r.value,a=null!==(e=r.selectionStart)&&void 0!==e?e:t.length,l=i(t);if(!l||"string"!=typeof l)return;const c=n(t,l);c!==t&&(r.value=c,s(r,t,c,a))},l=()=>{const e=r.value,t=i(e);t&&"string"==typeof t&&(r.value=n(e,t))};r.addEventListener("input",a),r.addEventListener("blur",l),e.cleanup((()=>{r.removeEventListener("input",a),r.removeEventListener("blur",l)}))}(e):function(e){const t=e.attr.value;if(!t)return;const r=e.block.el,i=()=>{var e;const i=r.value,a=null!==(e=r.selectionStart)&&void 0!==e?e:i.length,l=n(i,t);l!==i&&(r.value=l,s(r,i,l,a))},a=()=>{r.value=n(r.value,t)};r.addEventListener("input",i),r.addEventListener("blur",a),e.cleanup((()=>{r.removeEventListener("input",i),r.removeEventListener("blur",a)}))}(e)}return function(e){e.helper("money",t),e.directive("mask",r),e.directive("mask:dynamic",r)}}()}}]);