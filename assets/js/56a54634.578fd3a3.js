"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9519],{6037:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var t=s(1085),i=s(1184),o=s(1983);const r={},a="nextTick",c={id:"hooks/nextTick",title:"nextTick",description:"The nextTick hook ensures that a callback function is executed after the framework has finished updating dependencies. This is useful for scenarios where you need to wait for DOM updates before executing logic.",source:"@site/docs/hooks/nextTick.mdx",sourceDirName:"hooks",slug:"/hooks/nextTick",permalink:"/domy/docs/hooks/nextTick",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/domy/docs/category/hooks"},next:{title:"useAttrs",permalink:"/domy/docs/hooks/useAttrs"}},l={},d=[{value:"Syntax",id:"syntax",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2},{value:"Ensuring Correct DOM Interaction",id:"ensuring-correct-dom-interaction",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"nexttick",children:"nextTick"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"nextTick"})," hook ensures that a callback function is executed after the framework has finished updating dependencies. This is useful for scenarios where you need to wait for DOM updates before executing logic."]}),"\n",(0,t.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { nextTick } = DOMY;\n\nnextTick(() => {\n  console.log('DOM updates completed');\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nextTick()"})," ensures that the callback executes ",(0,t.jsx)(n.strong,{children:"after"})," DOM updates are finished."]}),"\n",(0,t.jsx)(n.li,{children:"It returns a promise, allowing for asynchronous execution."}),"\n",(0,t.jsx)(n.li,{children:"Useful for reading updated DOM values or performing next-step computations."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.h3,{id:"ensuring-correct-dom-interaction",children:"Ensuring Correct DOM Interaction"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<div>\n  <p d-ref="p">{{ message }}</p>\n  <button @click="updateMessage">Update Message</button>\n</div>\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { signal, nextTick, useRefs } = DOMY;\n\nDOMY.createApp(() => {\n  const refs = useRefs();\n  const message = signal('');\n\n  const updateMessage = () => {\n    message.value = 'Hello World!';\n    nextTick(() => alert(refs.p.textContent));\n  };\n\n  return {\n    message,\n    updateMessage\n  };\n}).mount();\n"})}),"\n",(0,t.jsx)(o.A,{code:'\n<div>\n  <p d-ref="p">{{ message }}</p>\n  <button @click="updateMessage">Update Message</button>\n</div>\n',domy:()=>{const{signal:e,nextTick:n,useRefs:s}=DOMY,t=s(),i=e("");return{message:i,updateMessage:()=>{i.value="Hello World!",n((()=>alert(t.p.textContent)))}}}})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);