"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9519],{1184:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var s=t(4041);const o={},r=s.createContext(o);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(r.Provider,{value:n},e.children)}},1983:(e,n,t)=>{t.d(n,{A:()=>c});var s=t(4041);const o="demo_TaPm";var r=t(1085);const c=({code:e,domy:n,components:c,config:i,plugins:a})=>{const d=(0,s.useRef)(null),[l,u]=(0,s.useState)(!1);return(0,s.useEffect)((()=>{let s=!0;u(!0);return(async()=>{try{if(!d.current||"undefined"==typeof window)return;const{default:s}=await t.e(5228).then(t.t.bind(t,2847,23));window.DOMY||(window.DOMY=s),console.log("DOMY"),d.current.innerHTML=e;const o=a?await a():[];s.createApp(n).configure(i??{}).plugins(o).components(c?.()).mount(d.current)}catch(s){console.error("[Demo] Load error:",s)}})(),()=>{s=!1}}),[l]),l?(0,r.jsx)("div",{className:o,ref:d}):(0,r.jsx)("div",{className:o,children:"Loading..."})}},6037:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var s=t(1085),o=t(1184),r=t(1983);const c={},i="nextTick",a={id:"hooks/nextTick",title:"nextTick",description:"The nextTick hook ensures that a callback function is executed after the framework has finished updating dependencies. This is useful for scenarios where you need to wait for DOM updates before executing logic.",source:"@site/docs/hooks/nextTick.mdx",sourceDirName:"hooks",slug:"/hooks/nextTick",permalink:"/domy/docs/hooks/nextTick",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Hooks",permalink:"/domy/docs/category/hooks"},next:{title:"useAttrs",permalink:"/domy/docs/hooks/useAttrs"}},d={},l=[{value:"Syntax",id:"syntax",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2},{value:"Ensuring Correct DOM Interaction",id:"ensuring-correct-dom-interaction",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"nexttick",children:"nextTick"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"nextTick"})," hook ensures that a callback function is executed after the framework has finished updating dependencies. This is useful for scenarios where you need to wait for DOM updates before executing logic."]}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { nextTick } = DOMY;\n\nnextTick(() => {\n  console.log('DOM updates completed');\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nextTick()"})," ensures that the callback executes ",(0,s.jsx)(n.strong,{children:"after"})," DOM updates are finished."]}),"\n",(0,s.jsx)(n.li,{children:"It returns a promise, allowing for asynchronous execution."}),"\n",(0,s.jsx)(n.li,{children:"Useful for reading updated DOM values or performing next-step computations."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.h3,{id:"ensuring-correct-dom-interaction",children:"Ensuring Correct DOM Interaction"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div>\n  <p d-ref="p">{{ message }}</p>\n  <button @click="updateMessage">Update Message</button>\n</div>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { signal, nextTick, useRefs } = DOMY;\n\nDOMY.createApp(() => {\n  const refs = useRefs();\n  const message = signal('');\n\n  const updateMessage = () => {\n    message.value = 'Hello World!';\n    nextTick(() => alert(refs.p.textContent));\n  };\n\n  return {\n    message,\n    updateMessage\n  };\n}).mount();\n"})}),"\n",(0,s.jsx)(r.A,{code:'\n<div>\n  <p d-ref="p">{{ message }}</p>\n  <button @click="updateMessage">Update Message</button>\n</div>\n',domy:()=>{const{signal:e,nextTick:n,useRefs:t}=DOMY,s=t(),o=e("");return{message:o,updateMessage:()=>{o.value="Hello World!",n((()=>alert(s.p.textContent)))}}}})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}}}]);