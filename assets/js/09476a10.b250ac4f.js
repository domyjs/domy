"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3077],{8707:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"helpers/$nextTick","title":"$nextTick","description":"The $nextTick special helper ensures that a callback function is executed after the framework has finished updating dependencies. This is useful for scenarios where you need to wait for DOM updates before executing logic.","source":"@site/docs/helpers/$nextTick.mdx","sourceDirName":"helpers","slug":"/helpers/$nextTick","permalink":"/domy/docs/helpers/$nextTick","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"$names","permalink":"/domy/docs/helpers/$names"},"next":{"title":"$props","permalink":"/domy/docs/helpers/$props"}}');var r=s(1085),a=s(1184),i=s(1983);const c={},l="$nextTick",d={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Behavior",id:"behavior",level:2},{value:"Example",id:"example",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"nexttick",children:"$nextTick"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$nextTick"})," special helper ensures that a callback function is executed after the framework has finished updating dependencies. This is useful for scenarios where you need to wait for DOM updates before executing logic."]}),"\n",(0,r.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"$nextTick(() => {\n  console.log('DOM updates completed');\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"behavior",children:"Behavior"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"$nextTick"})," ensures that the callback executes ",(0,r.jsx)(n.strong,{children:"after"})," DOM updates are finished."]}),"\n",(0,r.jsx)(n.li,{children:"It returns a promise, allowing for asynchronous execution."}),"\n",(0,r.jsx)(n.li,{children:"Useful for reading updated DOM values or performing next-step computations."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<div\n  d-scope="{\n    updateMessage: () => {\n        message = \'Hello World!\';\n        $nextTick(() => alert($refs.p.textContent)); \n    }\n}"\n>\n  <p d-ref="p">{{ message }}</p>\n  <button @click="updateMessage">Update Message</button>\n</div>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const { signal } = DOMY;\nDOMY.createApp(() => {\n  const message = signal('');\n  return { message };\n}).mount();\n"})}),"\n",(0,r.jsx)(i.A,{code:'\n<div d-scope="{\n  updateMessage: () => {\n      message = \'Hello World!\';\n      $nextTick(() => alert($refs.p.textContent)); \n  }\n}">\n<p d-ref="p">{{ message }}</p>\n<button @click="updateMessage">Update Message</button>\n</div>\n',domy:()=>{const{signal:e}=DOMY;return{message:e("")}}})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);