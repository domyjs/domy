"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8539],{8690:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"hooks/useNames","title":"useNames","description":"The useNames hook allows a component to access registered child elements that have been assigned a specific name using the d-name directive. This is useful for managing named slots or dynamically manipulating specific child elements within a component.","source":"@site/docs/hooks/useNames.mdx","sourceDirName":"hooks","slug":"/hooks/useNames","permalink":"/domy/docs/hooks/useNames","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"useConfig","permalink":"/domy/docs/hooks/useConfig"},"next":{"title":"useProps","permalink":"/domy/docs/hooks/useProps"}}');var a=s(1085),o=s(1184),i=s(1983);const d={},c="useNames",l={},r=[{value:"Syntax",id:"syntax",level:2},{value:"Example",id:"example",level:2},{value:"Injecting Named Child Elements",id:"injecting-named-child-elements",level:3}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"usenames",children:"useNames"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"useNames"})," hook allows a component to access registered child elements that have been assigned a specific name using the ",(0,a.jsx)(n.code,{children:"d-name"})," directive. This is useful for managing named slots or dynamically manipulating specific child elements within a component."]}),"\n",(0,a.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<ErrorMessage>\n  <p d-name="example">Hello</p>\n</ErrorMessage>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Inside ",(0,a.jsx)(n.code,{children:"ErrorMessage"}),", ",(0,a.jsx)(n.code,{children:"useNames()"})," will return:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const names = useNames();\nconsole.log(names['example']); // [<p>Hello</p>]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.h3,{id:"injecting-named-child-elements",children:"Injecting Named Child Elements"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<component>\n  <p d-name="header">This header is injected into the component.</p>\n  <p d-name="footer">This footer is injected into the component.</p>\n</component>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const { useNames } = DOMY;\n\nconst Component = DOMY.createComponent({\n  html: `\n    <div>\n        <template d-insert=\"names['header']\"></template>\n        <div>Main content</div>\n        <template d-insert=\"names['footer']\"></template>\n    </div>\n  `,\n  app: () => {\n    const names = useNames();\n    return {\n      names\n    };\n  }\n});\n"})}),"\n",(0,a.jsx)(i.A,{code:'\n<component>\n  <p d-name="header">This header is injected into the component.</p>\n  <p d-name="footer">This footer is injected into the component.</p>\n</component>\n',components:()=>{const{useNames:e}=DOMY;return{Component:DOMY.createComponent({html:"\n    <div>\n          <template d-insert=\"names['header']\"></template>\n          <div>Main content</div>\n          <template d-insert=\"names['footer']\"></template>\n    </div>\n    ",app:()=>({names:e()})})}}})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}}}]);