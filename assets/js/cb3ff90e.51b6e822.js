"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6709],{1184:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>r});var t=o(4041);const s={},l=t.createContext(s);function c(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(l.Provider,{value:n},e.children)}},1983:(e,n,o)=>{o.d(n,{A:()=>c});var t=o(4041);const s="demo_TaPm";var l=o(1085);const c=({code:e,domy:n,components:c,config:r,plugins:i})=>{const a=(0,t.useRef)(null),[d,u]=(0,t.useState)(!1);return(0,t.useEffect)((()=>{let t=!0;u(!0);return(async()=>{try{if(!a.current||"undefined"==typeof window)return;const{default:t}=await o.e(5228).then(o.t.bind(o,2847,23));window.DOMY||(window.DOMY=t),console.log("DOMY"),a.current.innerHTML=e;const s=i?await i():[];t.createApp(n).configure(r??{}).plugins(s).components(c?.()).mount(a.current)}catch(t){console.error("[Demo] Load error:",t)}})(),()=>{t=!1}}),[d]),d?(0,l.jsx)("div",{className:s,ref:a}):(0,l.jsx)("div",{className:s,children:"Loading..."})}},8656:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var t=o(1085),s=o(1184);o(1983);const l={},c="Lifecycle",r={id:"essentials/lifecycle",title:"Lifecycle",description:"DOMY provides lifecycle hooks that allow developers to execute logic at different stages of a component\u2019s lifecycle. These hooks are useful for initialization, mounting, cleanup, and unmounting processes.",source:"@site/docs/essentials/lifecycle.mdx",sourceDirName:"essentials",slug:"/essentials/lifecycle",permalink:"/docs/essentials/lifecycle",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Event Handling",permalink:"/docs/essentials/events"},next:{title:"Reactivity",permalink:"/docs/essentials/reactivity"}},i={},a=[{value:"Available Lifecycle Hooks",id:"available-lifecycle-hooks",level:2},{value:"<strong>onSetuped</strong>",id:"onsetuped",level:3},{value:"<strong>onMounted</strong>",id:"onmounted",level:3},{value:"<strong>onBeforeUnmount</strong>",id:"onbeforeunmount",level:3},{value:"<strong>onUnmounted</strong>",id:"onunmounted",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,t.jsxs)(n.p,{children:["DOMY provides lifecycle hooks that allow developers to execute logic at different stages of a component\u2019s lifecycle. These hooks are useful for ",(0,t.jsx)(n.strong,{children:"initialization, mounting, cleanup, and unmounting processes"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"available-lifecycle-hooks",children:"Available Lifecycle Hooks"}),"\n",(0,t.jsx)(n.h3,{id:"onsetuped",children:(0,t.jsx)(n.strong,{children:"onSetuped"})}),"\n",(0,t.jsx)(n.p,{children:"Triggered after the component has completed its setup phase. Mean it went through the whole setup function."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { onSetuped } = DOMY;\n\nonSetuped(() => {\n  console.log('Component setup complete!');\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"onmounted",children:(0,t.jsx)(n.strong,{children:"onMounted"})}),"\n",(0,t.jsxs)(n.p,{children:["Executed once the component is fully mounted in the DOM. Really usefull to access ",(0,t.jsx)(n.code,{children:"refs"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { onMounted, useRefs } = DOMY;\n\nconst refs = useRefs();\n\nonMounted(() => {\n  refs.input.focus();\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"onbeforeunmount",children:(0,t.jsx)(n.strong,{children:"onBeforeUnmount"})}),"\n",(0,t.jsxs)(n.p,{children:["Runs just before the component is unmounted, allowing cleanup operations. For example cleaning ",(0,t.jsx)(n.code,{children:"interval"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { onBeforeUnmount } = DOMY;\n\nlet intervalId = setInterval(() => {\n  console.log('Updating data...');\n}, 1000);\n\nonBeforeUnmount(() => {\n  clearInterval(intervalId);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"onunmounted",children:(0,t.jsx)(n.strong,{children:"onUnmounted"})}),"\n",(0,t.jsx)(n.p,{children:"Triggered after the component has been fully removed from the DOM."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const { onUnmounted } = DOMY;\n\nonUnmounted(() => {\n  console.log('Component fully unmounted, resources freed.');\n});\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);