"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1047],{8317:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>x,frontMatter:()=>d,metadata:()=>l,toc:()=>a});var i=s(1085),t=s(1184),r=s(1983);const d={},c="d-ref",l={id:"directives/d-ref",title:"d-ref",description:"The d-ref directive in DOMY allows you to assign a reference name to an element so you can easily access it later via the $refs object in your component or scope.",source:"@site/docs/directives/d-ref.mdx",sourceDirName:"directives",slug:"/directives/d-ref",permalink:"/domy/docs/directives/d-ref",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"d-once",permalink:"/domy/docs/directives/d-once"},next:{title:"d-scope",permalink:"/domy/docs/directives/d-scope"}},o={},a=[{value:"Syntax",id:"syntax",level:2},{value:"Modifiers",id:"modifiers",level:2},{value:"Example",id:"example",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"d-ref",children:"d-ref"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"d-ref"})," directive in DOMY allows you to ",(0,i.jsx)(n.strong,{children:"assign a reference name to an element"})," so you can easily access it later via the ",(0,i.jsx)(n.code,{children:"$refs"})," object in your component or scope."]}),"\n",(0,i.jsx)(n.p,{children:"This is useful for direct DOM access or manipulation when necessary."}),"\n",(0,i.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div d-ref="myElement"></div>\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can then access this element using:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"$refs.myElement;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"modifiers",children:"Modifiers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"dynamic"}),": Use this modifier if the name of the ref is dynamic (evaluated as an expression)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div d-ref.dynamic="someVar"></div>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"someVar"})," evaluates to ",(0,i.jsx)(n.code,{children:"'foo'"}),", then ",(0,i.jsx)(n.code,{children:"$refs.foo"})," will contain the element."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<div d-ref="title">Hello World</div>\n<button @click="alert($refs.title.textContents)">Show Text</button>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This will show an alert with the text content of the ",(0,i.jsx)(n.code,{children:"div"})," when the button is clicked."]}),"\n",(0,i.jsx)(r.A,{code:'     <div d-ref="title">Hello World</div>     <button @click="alert($refs.title.textContent)">Show Text</button>\n'})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);